{
	"info": {
		"_postman_id": "78e3d3a8-f6b2-48c0-bcc5-52f213f78c19",
		"name": "Go_Market",
		"description": "Go_Market backend tests.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47550840",
		"_collection_link": "https://czhang35-b1391359-892575.postman.co/workspace/Chengyuan-Zhang's-Workspace~8f53acc7-b370-4d8b-8603-e2f2318d2b3b/collection/47550840-78e3d3a8-f6b2-48c0-bcc5-52f213f78c19?action=share&source=collection_link&creator=47550840"
	},
	"item": [
		{
			"name": "sign up",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();",
							"",
							"if (res.dev_code) {",
							"    pm.collectionVariables.set(\"verification_code\", res.dev_code);",
							"}",
							"",
							"if (res.email) {",
							"    pm.collectionVariables.set(\"user_email\", res.email);",
							"}",
							"",
							"let req = JSON.parse(pm.request.body.raw);",
							"pm.collectionVariables.set(\"user_password\", req.password);",
							"",
							"",
							"",
							"pm.test(\"Stored verification code\", () => {",
							"    pm.expect(pm.collectionVariables.get(\"verification_code\")).to.exist;",
							"});",
							"",
							"pm.test(\"Stored verification code\", () => {",
							"    pm.expect(pm.collectionVariables.get(\"user_email\")).to.exist;",
							"});",
							"",
							"pm.test(\"Stored verification code\", () => {",
							"    pm.expect(pm.collectionVariables.get(\"user_password\")).to.exist;",
							"});",
							"",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"Tester2\",\n  \"lastName\": \"Test2\",\n  \"email\": \"tester2@mail.com\",\n  \"password\": \"passtest2\",\n  \"phone\": \"2222222222\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/users/signup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users",
						"signup"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "verify",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"code\": \"{{verification_code}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/users/verify",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users",
						"verify"
					]
				}
			},
			"response": []
		},
		{
			"name": "log in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"if (res.uid) {\r",
							"    pm.collectionVariables.set(\"user_id\", res.uid);\r",
							"}\r",
							"\r",
							"if (res.token) {\r",
							"    pm.collectionVariables.set(\"token\", res.token);\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Stored user id\", () => {\r",
							"    pm.expect(pm.collectionVariables.get(\"user_id\")).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Stored token\", () => {\r",
							"    pm.expect(pm.collectionVariables.get(\"token\")).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([302, 200, 201]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\": \"{{user_password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/users/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "create listing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([302, 200, 201]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"pen\",\r\n    \"price\": 9.99,\r\n    \"img\": \"pencil.png\",\r\n    \"description\": \"black pen 0.5mm with replacable ink\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/users/listItem",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users",
						"listItem"
					]
				}
			},
			"response": []
		},
		{
			"name": "show products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"let productId = null;\r",
							"if (Array.isArray(res) && res.length > 0) {\r",
							"    productId = res[0].ID;\r",
							"    productName = res[0].name\r",
							"} else if (res.ID) {\r",
							"    productId = res.ID;\r",
							"}\r",
							"\r",
							"if (productId) {\r",
							"    pm.collectionVariables.set(\"product_id\", productId);\r",
							"}\r",
							"\r",
							"if (productId) {\r",
							"    pm.collectionVariables.set(\"product_name\", productName);\r",
							"}\r",
							"\r",
							"pm.test(\"Stored product id\", () => {\r",
							"    pm.expect(pm.collectionVariables.get(\"product_id\")).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Stored product name\", () => {\r",
							"    pm.expect(pm.collectionVariables.get(\"product_name\")).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/users/view",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users",
						"view"
					]
				}
			},
			"response": []
		},
		{
			"name": "search product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/users/search?name={{product_name}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users",
						"search"
					],
					"query": [
						{
							"key": "name",
							"value": "{{product_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add to cart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/add?id={{product_id}}&userID={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"add"
					],
					"query": [
						{
							"key": "id",
							"value": "{{product_id}}"
						},
						{
							"key": "userID",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "list cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/list?id={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"list"
					],
					"query": [
						{
							"key": "id",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "remove from cart",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/remove?id={{product_id}}&userID={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"remove"
					],
					"query": [
						{
							"key": "id",
							"value": "{{product_id}}"
						},
						{
							"key": "userID",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"house\": \"Tester office\",\r\n  \"street\": \"test street\",\r\n  \"city\": \"Test\",\r\n  \"postal\": \"22222\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/addressadd?id={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"addressadd"
					],
					"query": [
						{
							"key": "id",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/addressdel?id={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"addressdel"
					],
					"query": [
						{
							"key": "id",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "edit home address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"house\": \"black house\",\r\n  \"street\": \"black street\",\r\n  \"city\": \"CD\",\r\n  \"postal\": \"50200\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/addresshomeedit?id={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"addresshomeedit"
					],
					"query": [
						{
							"key": "id",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "edit work address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"house\": \"black office\",\r\n  \"street\": \"black street\",\r\n  \"city\": \"CD\",\r\n  \"postal\": \"50201\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/addressworkedit?id={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"addressworkedit"
					],
					"query": [
						{
							"key": "id",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "cart checkout",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/checkout?id={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"checkout"
					],
					"query": [
						{
							"key": "id",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Instant buy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/buy?id={{product_id}}&userID={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"buy"
					],
					"query": [
						{
							"key": "id",
							"value": "{{product_id}}"
						},
						{
							"key": "userID",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Make review",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"rating\": 4.5,\r\n  \"review\": \"Solid pen, smooth to write and steady build\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8000/products/{{product_id}}/reviews?userID={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"products",
						"{{product_id}}",
						"reviews"
					],
					"query": [
						{
							"key": "userID",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "list reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8000/products/{{product_id}}/reviews?limit=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"products",
						"{{product_id}}",
						"reviews"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "peer sign up",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();",
							"",
							"if (res.dev_code) {",
							"    pm.collectionVariables.set(\"peer_verification_code\", res.dev_code);",
							"}",
							"",
							"if (res.email) {",
							"    pm.collectionVariables.set(\"peer_email\", res.email);",
							"}",
							"",
							"let req = JSON.parse(pm.request.body.raw);",
							"pm.collectionVariables.set(\"peer_password\", req.password);",
							"",
							"",
							"",
							"pm.test(\"Stored verification code\", () => {",
							"    pm.expect(pm.collectionVariables.get(\"peer_verification_code\")).to.exist;",
							"});",
							"",
							"pm.test(\"Stored verification code\", () => {",
							"    pm.expect(pm.collectionVariables.get(\"peer_email\")).to.exist;",
							"});",
							"",
							"pm.test(\"Stored verification code\", () => {",
							"    pm.expect(pm.collectionVariables.get(\"peer_password\")).to.exist;",
							"});",
							"",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"Tester1\",\n  \"lastName\": \"Test1\",\n  \"email\": \"tester1@mail.com\",\n  \"password\": \"passtest1\",\n  \"phone\": \"1111111111\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/users/signup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users",
						"signup"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "peer verify",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{peer_email}}\",\r\n    \"code\": \"{{peer_verification_code}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/users/verify",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users",
						"verify"
					]
				}
			},
			"response": []
		},
		{
			"name": "peer log in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"if (res.uid) {\r",
							"    pm.collectionVariables.set(\"peer_id\", res.uid);\r",
							"}\r",
							"\r",
							"if (res.token) {\r",
							"    pm.collectionVariables.set(\"peer_token\", res.token);\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Stored user id\", () => {\r",
							"    pm.expect(pm.collectionVariables.get(\"peer_id\")).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Stored token\", () => {\r",
							"    pm.expect(pm.collectionVariables.get(\"peer_token\")).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([302, 200, 201]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{peer_email}}\",\r\n    \"password\": \"{{peer_password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/users/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "create chat",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"if (res.id) {\r",
							"    pm.collectionVariables.set(\"chat_id\", res.id);\r",
							"}\r",
							"\r",
							"pm.test(\"Stored chat id\", () => {\r",
							"    pm.expect(pm.collectionVariables.get(\"chat_id\")).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([302, 200, 201]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n{ \r\n    \"peerId\": \"{{peer_id}}\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/chats?userID={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"chats"
					],
					"query": [
						{
							"key": "userID",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List chats",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/chats?userID={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"chats"
					],
					"query": [
						{
							"key": "userID",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Send message",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"text\": \"hello\" \r\n}"
				},
				"url": {
					"raw": "http://localhost:8000/chats/{{chat_id}}/messages?userID={{user_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"chats",
						"{{chat_id}}",
						"messages"
					],
					"query": [
						{
							"key": "userID",
							"value": "{{user_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Mark as read",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"peerId\": \"{{user_id}}\" \r\n}"
				},
				"url": {
					"raw": "http://localhost:8000/chats/{{chat_id}}/read?userID={{peer_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"chats",
						"{{chat_id}}",
						"read"
					],
					"query": [
						{
							"key": "userID",
							"value": "{{peer_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "list messages",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 302]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const token = pm.collectionVariables.get('token');\r",
							"pm.request.headers.upsert({ key: 'token', value: token });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8000/chats/{{chat_id}}/messages?userID={{user_id}}&limit=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"chats",
						"{{chat_id}}",
						"messages"
					],
					"query": [
						{
							"key": "userID",
							"value": "{{user_id}}"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "verification_code",
			"value": ""
		},
		{
			"key": "user_email",
			"value": ""
		},
		{
			"key": "user_password",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "product_id",
			"value": ""
		},
		{
			"key": "product_name",
			"value": ""
		},
		{
			"key": "peer_verification_code",
			"value": ""
		},
		{
			"key": "peer_email",
			"value": ""
		},
		{
			"key": "peer_password",
			"value": ""
		},
		{
			"key": "peer_id",
			"value": ""
		},
		{
			"key": "peer_token",
			"value": ""
		},
		{
			"key": "chat_id",
			"value": ""
		}
	]
}